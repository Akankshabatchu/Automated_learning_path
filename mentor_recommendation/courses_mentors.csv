course_name,category,mentor_list,Skills_Covered,Tags,Difficulty_Level,Description
Computer Science 101: Master the Theory Behind Programming,Computer Science,M001; M002; M003; M008; M004,"Algorithm analysis, data structures (arrays, linked lists, stacks, queues, trees), sorting algorithms, graph theory, hashing algorithms.","Computer Science, Programming Theory, Algorithms, Data Structures",Beginner,"This course provides a comprehensive introduction to core computer science concepts, covering topics like data structures, algorithms, and programming paradigms."
Foundations of Computer Science: Theory and Practice,Computer Science,M001; M002; M003; M019; M011,"Algorithm design, data structures, computational theory, problem-solving.","Computer Science, Theory, Practice, Algorithms",Beginner,Learn the fundamental topics of computer science and practice them for full mastery.
The Complete Theory of Computation,Computer Science,M001; M004; M019; M002; M008,"Automata theory, formal languages, Turing machines, decidability, complexity theory.","Theory of Computation, Automata, Turing Machines, Complexity",Intermediate,This course is designed to give you the theory of computation knowledge and skills you need to become an advanced developer.
Theory of Automata and Computation,Computer Science,M001; M002; M003; M010; M019,"Automata theory, formal languages, grammar, Turing machines, computational theory.","Automata, Computation, Formal Languages, Turing Machines",Intermediate,"This is the most compendious and extensive, yet very straightforward course on the theory of automata and computation."
Operating Systems from Scratch - Part 1,Operating Systems,M017; M024; M019; M008; M015,"Process management, memory management, file systems, input/output systems, operating system principles.","Operating Systems, Process Management, Memory Management, File Systems",Intermediate,Learn the concepts of operating systems from scratch as operating system forms the core of computer science.
Data Structures & Algorithms Essentials using C++ (2023),Programming Languages,M002; M025; M027; M004; M005,"Arrays, linked lists, stacks, queues, trees, sorting algorithms, graph algorithms, dynamic programming.","Data Structures, Algorithms, C++, Programming",Intermediate,A comprehensive course covering essential data structures and algorithms using C++.
Discrete Mathematics,Computer Science,M001; M002; M003; M004; M019,"Set theory, logic, number theory, proofs, functions, relations, graph theory, combinatorics.","Discrete Mathematics, Logic, Graph Theory, Combinatorics",Intermediate,A foundational course covering a wide range of topics essential for computer science.
Graph Theory Algorithms,Computer Science,M002; M001; M007; M019; M036,"Graph representations, search algorithms (DFS, BFS), tree algorithms, shortest path algorithms, network flow.","Graph Theory, Algorithms, Network Flow, Search Algorithms",Intermediate,Explore the fundamentals of graph theory and its applications.
Computer Science 101 - Computers & Programming for Beginners,Computer Science,M001; M002; M003; M011; M017,"Algorithms, programming fundamentals, variables, loops, conditional statements, object-oriented programming.","Computer Science, Programming Theory, Algorithms, Data Structures",Beginner,An introductory course covering the basics of computers and programming for beginners.
Computational Thinking for Problem Solving,Computer Science,M001; M019; M037; M025; M005,"Problem-solving techniques, abstraction, pattern recognition, algorithms, computational models.","Computational Thinking, Problem Solving, Algorithms, Programming Fundamentals.",Intermediate,Learn to think computationally and solve real-world problems using a structured approach.
Introduction to Information Theory,Computer Science,M001; M002; M017; M024; M036,"Entropy, Shannon’s theorem, Huffman coding, lossless/lossy compression, error correction.","Information Theory, Entropy, Data Compression, Coding Theory.",Beginner,"Learn the principles of information theory, entropy, coding theory, and data compression."
Mathematical Foundations of Computer Science,Computer Science,M001; M002; M019; M004; M036,"Logic, proof techniques, set theory, combinatorics, probability, graph theory.","Mathematics, Logic, Proof Techniques, Graph Theory.",Beginner,Covers essential mathematical concepts required for theoretical and applied computer science.
Introduction to Cryptography,Security,M008; M019; M024; M017; M006,"Symmetric/asymmetric encryption, hashing, RSA, digital signatures, cryptographic protocols.","Cryptography, Encryption, Cybersecurity, Hashing, Security Protocols.",Beginner,"Learn the fundamentals of cryptographic techniques, encryption methods, and security principles."
Functional Programming Principles in Scala,Programming Languages,M002; M004; M003; M011; M024,"Lambda calculus, higher-order functions, recursion, immutability, monads.","Functional Programming, Scala, Lambda Calculus, Higher-Order Functions.",Intermediate,Understand the fundamentals of functional programming and how they apply to real-world scenarios.
Introduction to Quantum Computing and Quantum Algorithms,Computer Science,M001; M002; M019; M036; M017,"Quantum mechanics basics, qubits, quantum gates, Shor’s algorithm, Grover’s search.","Quantum Computing, Qubits, Quantum Algorithms, Superposition, Entanglement.",Beginner,A beginner’s guide to the principles of quantum computing and key quantum algorithms.
Discrete Mathematics for Computer Science,Computer Science,M001; M002; M003; M024; M017,"Set theory, logic, relations, combinatorics, graph theory, proof techniques.","Discrete Mathematics, Logic, Set Theory, Proof Techniques, Graph Theory.",Intermediate,"Learn essential discrete math concepts required in computer science, including set theory, logic, combinatorics, and graph theory."
"Master Discrete Mathematics: Set Theory, Relations, Functions",Computer Science,M001; M011; M002; M019; M017,"Set operations, types of relations, functions, equivalence relations, partial orderings.","Set Theory, Relations, Functions, Discrete Structures.",Intermediate,"Covers fundamental discrete mathematics topics, focusing on sets, relations, and functions with real-world applications."
Graph Theory for Beginners,Computer Science,M001; M002; M005; M019; M004,"Graph representation, adjacency matrices, shortest paths, Euler circuits, Hamiltonian paths.","Graph Theory, Graph Algorithms, Trees, Euler Circuits.",Beginner,"A comprehensive introduction to graph theory, covering paths, cycles, trees, and applications in computer science."
Logic and Proof Techniques in Discrete Mathematics,Computer Science,M001; M002; M011; M019; M005,"Propositional logic, predicate logic, direct and indirect proofs, mathematical induction.","Logic, Proof Techniques, Induction, Discrete Structures.",Intermediate,"Learn logic, proof strategies, and mathematical reasoning, essential for theoretical computer science."
Combinatorics and Probability in Discrete Mathematics,Computer Science,M001; M002; M019; M018; M017,"Counting principles, probability theory, binomial coefficients, Pascal’s triangle, inclusion-exclusion principle.","Combinatorics, Probability, Counting, Binomial Theorem.",Intermediate,"Covers permutations, combinations, binomial theorem, probability, and their applications in computer science."
Boolean Algebra and Digital Logic,Hardware,M001; M002; M008; M019; M010,"Boolean expressions, Karnaugh maps, logic simplification, combinational and sequential circuits.","Boolean Algebra, Logic Gates, Digital Circuits, Karnaugh Maps.",Intermediate,"Understand Boolean algebra, logic gates, and circuit design for digital computing."
Introduction to Number Theory for Cryptography,Security,M008; M019; M024; M014; M015,"Prime numbers, modular arithmetic, Fermat’s theorem, RSA encryption, discrete logarithm problem.","Number Theory, Modular Arithmetic, Cryptography, RSA Algorithm.",Beginner,"Learn number theory concepts used in cryptography, including modular arithmetic, prime numbers, and RSA encryption"
Mathematical Induction and Recurrence Relations,Computer Science,M001; M002; M024; M017; M011,"Inductive proofs, strong induction, recurrence relations, closed-form solutions.","Induction, Recurrence Relations, Algorithm Analysis.",Intermediate,"Master mathematical induction and recurrence relations, which are widely used in algorithm analysis."
Automata Theory and Formal Languages,Computer Science,M001; M002; M003; M019; M025,"DFA, NFA, regular expressions, CFGs, pushdown automata, Turing machines.","Automata Theory, Formal Languages, Turing Machines, Regular Expressions.",Intermediate,"Learn about finite automata, regular languages, context-free grammars, and Turing machines."
Linear Algebra for Computer Science,Computer Science,M001; M003; M002; M019; M024,"Matrices, vectors, eigenvalues, eigenvectors, transformations.","Linear Algebra, Matrices, Vectors, Eigenvalues.",Intermediate,Understand the importance of linear algebra in computer science applications like machine learning and graphics.
Set Theory and Cardinality,Computer Science,M001; M002; M019; M024; M005,"Set notation, Cartesian products, cardinality, countable/uncountable sets, Cantor’s theorem.","Set Theory, Cardinality, Cantor’s Theorem, Discrete Structures.",Intermediate,"Learn about set theory fundamentals, countable vs uncountable sets, and cardinality concepts."
Discrete Math for Computer Science Interviews,Career Development,M001; M002; M019; M022; M024,"Logical reasoning, proof strategies, combinatorics, recursion, graph theory.","Discrete Mathematics, Interviews, Logical Reasoning, Graphs.",Intermediate,Master discrete math concepts frequently tested in technical interviews.
Introduction to Lattices and Boolean Algebra,Computer Science,M001; M002; M019; M017; M008,"Lattices, Boolean algebra, distributive laws, De Morgan’s laws, logic functions.","Lattices, Boolean Algebra, Logic, Discrete Mathematics.",Beginner,"Learn about partially ordered sets, lattices, and Boolean algebra for theoretical computer science."
Recursion and Generating Functions in Discrete Math,Computer Science,M001; M002; M019; M024; M005,"Recursion, recurrence relations, generating functions, combinatorial counting.","Recursion, Generating Functions, Counting, Recurrence Relations.",Intermediate,"Covers recursive sequences, recurrence relations, and generating functions used in algorithm analysis."
Mathematical Structures in Discrete Mathematics,Computer Science,M001; M002; M019; M024; M008,"Groups, rings, fields, modular arithmetic, abstract algebra.","Mathematical Structures, Groups, Rings, Fields, Abstract Algebra.",Intermediate,"Covers mathematical structures used in discrete mathematics, including groups, rings, and fields."
Computational Thinking for Beginners,Computer Science,M001; M002; M019; M004; M011,"Decomposition, pattern recognition, abstraction, algorithms, logical reasoning.","Computational Thinking, Problem-Solving, Logical Reasoning, Algorithms.",Beginner,Learn how to break down complex problems and think logically to solve real-world challenges using computational thinking.
Mastering Computational Thinking for Problem-Solving,Computer Science,M001; M002; M019; M024; M036,"Algorithm design, abstraction, logical thinking, debugging techniques.","Computational Thinking, Problem-Solving, Algorithm Design, Debugging.",Intermediate,Develop problem-solving skills using computational thinking principles applicable in programming and real-world scenarios.
Computational Thinking and Python Programming,Programming Languages,M003; M005; M011; M024; M019,"Algorithmic thinking, Python programming, recursion, data representation.","Python, Computational Thinking, Algorithms, Programming.",Intermediate,Learn computational thinking and apply it using Python programming to build effective algorithms.
Introduction to Algorithmic Thinking,Computer Science,M001; M002; M003; M024; M017,"Flowcharts, pseudo-code, pattern recognition, debugging strategies.","Algorithmic Thinking, Flowcharts, Computational Thinking, Logical Reasoning.",Beginner,Learn the fundamental concepts of algorithmic problem-solving and computational thinking.
Computational Thinking for Artificial Intelligence,AI & Machine Learning,M005; M014; M037; M015; M003,"Pattern recognition, heuristics, problem-solving, AI algorithms.","AI, Machine Learning, Computational Thinking, Heuristics.",Intermediate,Understand computational thinking concepts in AI and machine learning applications.
Problem-Solving Strategies with Computational Thinking,Software Engineering,M001; M005; M037; M024; M017,"Logical reasoning, algorithm design, decomposition, abstraction.","Computational Thinking, Problem-Solving, Logical Reasoning, Algorithms.",Intermediate,Develop structured thinking for solving problems in programming and real-life scenarios.
Logical Reasoning and Computational Thinking,Computer Science,M001; M019; M011; M024; M002,"Logic, deduction, inductive reasoning, computational models.","Logical Thinking, Deduction, Computational Thinking, Problem-Solving.",Intermediate,"Enhance logical reasoning skills for programming, mathematics, and problem-solving."
Computational Thinking for Data Science,Data Science,M019; M005; M037; M022; M024,"Data abstraction, pattern recognition, algorithmic thinking, data wrangling.","Data Science, Computational Thinking, Data Analysis, Pattern Recognition.",Intermediate,Learn how computational thinking applies to data analysis and problem-solving in data science.
Developing a Problem-Solving Mindset with Computational Thinking,Personal Development,M001; M002; M017; M005; M036,"Critical thinking, pattern analysis, logic building, algorithm design.","Computational Thinking, Problem-Solving, Logical Thinking, Critical Thinking.",Intermediate,Train your mind to think critically and solve problems efficiently using computational thinking techniques.
Computational Thinking for Kids and Beginners,STEM Education,M001; M002; M019; M024; M011,"Logical thinking, basic coding, pattern recognition, problem-solving.","Kids Coding, Computational Thinking, Logical Reasoning, STEM Learning.",Beginner,A beginner-friendly course to teach young learners how to think computationally and solve problems.
From Computational Thinking to Coding,Programming Languages,M003; M005; M011; M002; M024,"Decomposition, algorithms, flowcharts, programming basics.","Computational Thinking, Coding, Algorithm Design, Programming Logic.",Intermediate,A step-by-step approach to transitioning from computational thinking concepts to actual coding in programming languages.
Computational Thinking for Game Development,Game Development,M011; M001; M017; M006; M004,"AI behavior, game logic, event-driven programming, problem-solving.","Game Development, Computational Thinking, AI, Game Logic.",Intermediate,Learn how to apply computational thinking in game design and development.
Algorithmic and Computational Thinking for Competitive Programming,Software Engineering,M001; M002; M037; M024; M005,"Algorithm optimization, recursion, dynamic programming, complexity analysis.","Competitive Programming, Computational Thinking, Algorithms, Problem-Solving.",Intermediate,Develop computational thinking strategies used in competitive programming and coding challenges.
Computational Thinking for Business and Decision Making,Data & Analytics,M010; M005; M011; M024; M022,"Decision modeling, pattern analysis, data-driven strategies, problem-solving.","Business, Decision Making, Computational Thinking, Data Analysis.",Intermediate,Use computational thinking to make data-driven decisions and solve business problems efficiently.
Creative Problem-Solving with Computational Thinking,Creativity & Innovation,M001; M019; M022; M024; M005,"Divergent thinking, abstraction, logical deduction, problem decomposition.","Creativity, Problem-Solving, Computational Thinking, Logical Deduction.",Intermediate,Learn to apply computational thinking creatively to solve complex problems in different domains.
The Complete C Programming Course for Beginners,Programming Languages,M001; M005; M002; M024; M022,"Variables, loops, functions, pointers, memory management, file handling.","C Programming, Pointers, Memory Management, Functions, C Basics.",Beginner,"Learn the fundamentals of C programming from scratch, including data types, loops, functions, and pointers."
Master C++: From Beginner to Advanced,Programming Languages,M002; M001; M005; M024; M011,"Object-oriented programming, pointers, dynamic memory allocation, STL.","C++, Object-Oriented Programming, STL, Pointers, Memory Management.",Beginner,"A comprehensive C++ course covering OOP concepts, data structures, STL, and memory management."
Java Programming for Complete Beginners,Programming Languages,M004; M005; M001; M024; M022,"OOP, exception handling, multi-threading, collections, Java basics.","Java, Object-Oriented Programming, Java Collections, Multi-threading, Java Basics.",Beginner,"Learn Java from scratch, including syntax, OOP concepts, and Java Collections Framework."
Python for Absolute Beginners,Programming Languages,M003; M005; M001; M004; M024,"Python syntax, loops, functions, file handling, exception handling.","Python, Loops, Functions, File Handling, Beginner Python.",Beginner,"A beginner-friendly course covering Python basics, data types, loops, and file handling."
JavaScript Essentials for Beginners,Web Development,M007; M004; M002; M019; M022,"JavaScript syntax, DOM manipulation, event handling, ES6 features.","JavaScript, ES6, DOM, Event Handling, Web Development.",Beginner,"Learn JavaScript basics, DOM manipulation, and event handling for web development."
C# for Beginners: Learn to Code with C#,Game Development,M011; M001; M008; M024; M002,"C# syntax, OOP, exception handling, LINQ, .NET framework.","C#, OOP, .NET, LINQ, C# Programming.",Beginner,Master C# programming from basics to advanced topics like OOP and LINQ.
Kotlin for Android Development,Mobile Development,M019; M024; M003; M002; M007,"Kotlin syntax, Android Studio, Jetpack Compose, MVVM architecture.","Kotlin, Android, Jetpack Compose, Mobile Development, MVVM.",Intermediate,Learn Kotlin and use it to develop Android apps with Jetpack Compose.
PHP & MySQL: Web Development from Scratch,Web Development,M004; M007; M002; M019; M025,"PHP syntax, database connectivity, CRUD operations, sessions.","PHP, MySQL, Web Development, Backend Development, CRUD.",Intermediate,Build dynamic websites using PHP and MySQL database.
R Programming for Data Science,Programming Languages,M002; M005; M037; M017; M018,"R syntax, data visualization, statistical analysis, machine learning.","R Programming, Data Science, Data Analysis, Visualization, R Basics.",Intermediate,Learn R programming for statistical analysis and data visualization.
Shell Scripting for DevOps,DevOps,M005; M024; M002; M009; M004,"Bash scripting, process automation, Linux commands, scripting best practices.","Shell Scripting, DevOps, Bash, Automation, Linux Commands.",Intermediate,Master shell scripting for automation and DevOps workflows.
Software Development Life Cycle (SDLC) - A Complete Guide,Software Engineering,M005; M024; M001; M019; M019,"SDLC phases, software requirements, design, development, testing, deployment, and maintenance.","SDLC, Software Engineering, Agile, Waterfall, Software Development.",Intermediate,"Learn the fundamentals of SDLC, including waterfall, agile, and DevOps models, and best practices for software development."
Agile Software Development: Scrum & Kanban Explained,Project Management,M019; M005; M024; M007; M002,"Agile principles, Scrum framework, Kanban boards, sprint planning, backlog grooming.","Agile, Scrum, Kanban, Software Development, Project Management.",Intermediate,"Learn how to implement Agile methodologies, including Scrum and Kanban, in software development."
Software Engineering 101: Understanding SDLC Models,Software Engineering,M019; M024; M001; M037; M002,"SDLC models, software process improvement, requirement analysis, software quality.","SDLC, Software Engineering, Development Models, Agile, Waterfall.",Beginner,"A beginner’s guide to different SDLC models, including waterfall, iterative, V-model, spiral, and agile."
Software Testing & Quality Assurance (QA) Fundamentals,Software Testing,M008; M005; M024; M011; M004,"Unit testing, integration testing, system testing, UAT, automated testing tools.","Software Testing, QA, Test Automation, SDLC Testing, Bug Tracking.",Intermediate,Learn the importance of testing in SDLC and explore different testing methodologies.
DevOps Essentials: Understanding CI/CD and SDLC Integration,DevOps,M024; M001; M005; M007; M009,"CI/CD, Jenkins, Git, Docker, Kubernetes, deployment automation.","DevOps, CI/CD, Software Development, SDLC Automation, Continuous Integration.",Intermediate,"Learn how DevOps integrates into SDLC with CI/CD pipelines, automation, and infrastructure as code."
Software Requirements Engineering & Documentation,Software Engineering,M019; M037; M024; M011; M002,"Requirements gathering, use case modeling, UML diagrams, functional vs. non-functional requirements.","Software Requirements, Business Analysis, SDLC, Use Cases, Documentation.",Intermediate,Learn how to gather and document software requirements effectively for better SDLC management.
Agile Scrum Master Certification Prep,Project Management,M019; M005; M024; M004; M002,"Scrum framework, sprint planning, Agile ceremonies, backlog management.","Scrum, Agile, SDLC, Project Management, Certification.",Intermediate,Prepare for Scrum Master certification with a deep dive into Agile and Scrum methodologies.
Introduction to Software Architecture & Design Patterns,Software Engineering,M019; M002; M001; M024; M007,"MVC, microservices, monolithic vs. distributed systems, SOLID principles.","Software Architecture, Design Patterns, Microservices, System Design, SDLC.",Beginner,"Learn software architecture principles, including layered architecture, microservices, and design patterns."
Waterfall vs. Agile: Choosing the Right SDLC Model,Software Engineering,M024; M004; M019; M022; M005,"SDLC comparison, project management, risk analysis, iterative development.","Waterfall, Agile, SDLC, Iterative Development, Software Lifecycle.",Intermediate,Understand the key differences between Waterfall and Agile methodologies and when to use each.
Secure Software Development Life Cycle (SSDLC),Cybersecurity,M019; M008; M024; M017; M022,"Secure coding, threat modeling, OWASP Top 10, penetration testing.","Cybersecurity, Secure SDLC, Threat Modeling, Secure Coding, Penetration Testing.",Intermediate,Learn how to integrate security best practices into SDLC to prevent vulnerabilities.
Software Project Management with SDLC,Project Management,M019; M007; M005; M001; M024,"Project planning, risk assessment, software cost estimation, stakeholder communication.","SDLC, Project Management, Risk Assessment, Software Planning, Agile.",Intermediate,Learn project management best practices using SDLC methodologies.
Microservices Development and SDLC Best Practices,Software Engineering,M025; M005; M037; M019; M019,"Microservices architecture, REST APIs, API gateways, service discovery.","Microservices, API Development, SDLC, Software Design, Kubernetes.",Intermediate,Understand SDLC best practices for building scalable microservices applications.
Business Analyst Guide to Software Development Life Cycle,Business Analysis,M005; M019; M004; M012; M011,"Process modeling, user stories, stakeholder communication, requirement documentation.","Business Analysis, SDLC, Requirement Gathering, UML, Process Modeling.",Intermediate,Learn how business analysts contribute to SDLC through requirement analysis and stakeholder management.
Mastering Object-Oriented Programming in Java,Programming Languages,M004; M001; M017; M008; M006,"OOP concepts, Java syntax, design patterns, Java classes and objects.","Java, OOP, Object-Oriented Programming, Java Classes, Inheritance.",Intermediate,"Learn OOP principles using Java, covering encapsulation, inheritance, polymorphism, and abstraction."
Object-Oriented Programming (OOP) for Beginners in Python,Programming Languages,M003; M006; M019; M004; M011,"Python classes, constructors, inheritance, polymorphism, magic methods.","Python, OOP, Object-Oriented, Classes, Inheritance.",Beginner,"Learn how to write clean, reusable, and efficient code using Python's OOP features."
C++ Object-Oriented Programming and STL,Programming Languages,M002; M019; M004; M031; M005,"C++ classes, constructors, destructors, function overloading, STL containers.","C++, OOP, STL, Object-Oriented, Polymorphism.",Intermediate,Learn OOP in C++ along with the Standard Template Library (STL) for efficient coding.
Design Patterns and Object-Oriented Programming in C#,Software Development,M002; M005; M011; M014; M006,"C# OOP, interfaces, dependency injection, SOLID principles, design patterns.","C#, OOP, Design Patterns, SOLID, Object-Oriented.",Intermediate,Master OOP principles in C# and learn how to implement design patterns effectively.
Object-Oriented Programming with JavaScript (ES6+),Web Development,M007; M024; M001; M002; M005,"JavaScript classes, prototypes, closures, encapsulation, inheritance.","JavaScript, OOP, Object-Oriented, Classes, Prototypes.",Intermediate,Learn how to apply OOP principles in JavaScript using ES6+ features.
UML & Object-Oriented Design Foundations,Software Engineering,M019; M007; M011; M004; M005,"UML diagrams, class relationships, software architecture, design principles.","UML, OOP, Software Design, Object-Oriented, Class Diagrams.",Beginner,Learn how to design software systems using UML and OOP principles.
Object-Oriented Programming and Data Structures in Python,Data Science,M003; M019; M024; M021; M002,"Python OOP, linked lists, stacks, queues, trees, recursion.","Python, OOP, Data Structures, Object-Oriented, Algorithms.",Intermediate,Learn how to implement OOP with data structures in Python.
SOLID Principles and Object-Oriented Design Patterns,Software Engineering,M019; M002; M011; M017; M006,"SOLID principles, dependency injection, design patterns, clean code.","SOLID, OOP, Object-Oriented, Design Patterns, Clean Code.",Intermediate,Learn the five SOLID principles of OOP and how to apply them to real-world projects.
Python OOP: Build Real-World Applications,Software Development,M003; M021; M024; M008; M004,"Python OOP, project-based learning, MVC architecture, unit testing.","Python, OOP, Object-Oriented, Real-World Applications, Project-Based Learning.",Intermediate,Learn OOP in Python by building real-world applications like a banking system.
OOP Principles and Java Web Development,Web Development,M004; M002; M022; M019; M031,"Java OOP, Spring Boot, MVC, REST APIs.","Java, OOP, Object-Oriented, Spring Boot, Web Development.",Intermediate,Learn how OOP principles are applied in Java web applications using Spring Boot.
Object-Oriented Analysis & Design for Software Engineers,Software Engineering,M004; M019; M022; M002; M019,"OOP analysis, design patterns, software architecture, UML modeling.","OOP, Software Engineering, UML, Object-Oriented, Design Patterns.",Intermediate,"Learn OOP-based software development, from requirements to implementation."
Functional Programming in JavaScript – Master the Concepts,Web Development,M007; M019; M022; M010; M014,"JavaScript functional programming, pure functions, higher-order functions, currying, immutability.","JavaScript, Functional Programming, Higher-Order Functions, ES6, Pure Functions.",Intermediate,"Learn how to write pure functions, use higher-order functions, and apply functional programming techniques in JavaScript."
Functional Programming in Python – From Beginner to Expert,Programming Languages,M003; M019; M005; M024; M006,"Lambda functions, list comprehensions, map/filter/reduce, decorators, immutability.","Python, Functional Programming, Lambda, Map-Reduce, Decorators.",Beginner,"Learn how to leverage Python’s functional programming capabilities to write cleaner, more efficient code."
Functional Programming in Java 8+,Programming Languages,M004; M022; M019; M007; M006,"Java Streams API, lambda expressions, functional interfaces, method references.","Java, Functional Programming, Streams API, Lambdas, Java 8+.",Intermediate,"Learn functional programming in Java using Java 8+ features like Streams, Lambda expressions, and Optional."
Mastering Functional Programming with Kotlin,Mobile Development,M024; M059; M021; M002; M004,"Kotlin lambdas, extension functions, coroutines, functional collections.","Kotlin, Functional Programming, Coroutines, Higher-Order Functions, Extension Functions.",Intermediate,"Learn Kotlin’s functional programming features, including lambda expressions, higher-order functions, and coroutines."
Functional Data Structures and Algorithms,Data Structures & Algorithms,M006; M008; M024; M017; M002,"Immutable data structures, recursion, functional graphs, pattern matching.","Functional Programming, Data Structures, Algorithms, Immutable Structures, Recursion.",Intermediate,Learn how to implement data structures and algorithms in a functional programming paradigm.
Compiler Design: Introduction to Compiler Theory,Computer Science Theory,M029; M001; M002; M024; M019,"Lexical analysis, parsing, syntax trees, code generation, compiler phases.","Compiler Design, Parsing, Syntax Analysis, Code Generation, Computer Science.",Beginner,"Learn the fundamental concepts of compiler design, including lexical analysis, parsing, and code generation."
Building a Compiler from Scratch,Software Development,M029; M001; M019; M002; M024,"Tokenization, lexical analysis, code optimization, LLVM IR.","Compiler, Python, LLVM, Tokenization, Code Optimization.",Intermediate,Learn how to build a simple compiler from scratch using Python and LLVM.
Lexical Analysis & Tokenization for Compiler Design,Computer Science Theory,M029; M001; M002; M008; M024,"Finite state machines, regular expressions, tokenization, symbol tables.","Compiler, Lexical Analysis, Tokenization, Finite State Machines, Regular Expressions.",Intermediate,Learn how lexical analysis works and how to implement tokenization in a compiler.
Code Optimization Techniques in Compiler Design,Computer Science Theory,M029; M006; M001; M024; M002,"Constant folding, loop unrolling, strength reduction, dead code elimination.","Compiler Optimization, Code Optimization, Constant Folding, Dead Code Elimination, Strength Reduction.",Intermediate,"Learn advanced techniques for optimizing code in a compiler, including constant folding and dead code elimination."
Understanding Context-Free Grammars in Compiler Design,Computer Science Theory,M029; M001; M003; M017; M022,"Context-free grammars, syntax trees, parsing techniques.","Compiler, CFG, Syntax Analysis, Parsing, Formal Languages.",Intermediate,Learn about context-free grammars (CFGs) and their role in syntax analysis in compilers.
Garbage Collection & Memory Management in Compilers,Computer Science Theory,M029; M005; M001; M004; M024,"Reference counting, mark-and-sweep, generational garbage collection.","Compiler, Memory Management, Garbage Collection, Reference Counting, Mark-and-Sweep.",Intermediate,"Learn how memory management works in compilers, including garbage collection algorithms."
Mastering Data Structures & Algorithms in C and C++,Data Structures & Algorithms,M001; M002; M003; M015; M024,"Arrays, linked lists, stacks, queues, trees, graphs, recursion, searching & sorting.","Data Structures, C++, C, Algorithms, DSA.",Intermediate,"A deep dive into data structures such as arrays, linked lists, stacks, queues, graphs, and trees using C and C++."
Data Structures and Algorithms: Deep Dive Using Java,Data Structures & Algorithms,M004; M002; M001; M017; M021,"Java collections, recursion, trees, graphs, and memory management.","Java, Data Structures, Graphs, Trees, Linked Lists.",Intermediate,"Learn data structures with Java, covering arrays, linked lists, stacks, queues, trees, graphs, and hashing."
"Python Data Structures: Linked Lists, Stacks & Queues",Data Science,M003; M024; M001; M005; M002,"Python programming, linked lists, stack operations, queue implementations.","Python, Data Structures, Linked Lists, Stacks, Queues.",Intermediate,"Implement linked lists, stacks, and queues in Python with hands-on exercises and real-world applications."
"Mastering Trees: Binary, AVL, B-Trees & More",Data Structures & Algorithms,M011; M003; M002; M024; M005,"Tree traversal, self-balancing trees, heap operations, tree-based searching.","Trees, AVL Tree, Binary Tree, Data Structures, Algorithms.",Intermediate,"Learn tree-based data structures such as binary trees, AVL trees, B-trees, and red-black trees."
Stack and Queue Data Structures in JavaScript,Web Development,M004; M011; M007; M006; M024,"Stack operations, queue operations, recursion, ES6 classes.","JavaScript, Stacks, Queues, Web Development, Algorithms.",Intermediate,Implement stack and queue data structures in JavaScript for front-end and back-end applications.
"Java Collections Framework: Stacks, Queues & Trees",Software Development,M008; M002; M024; M005; M017,"Java Collections, PriorityQueue, TreeMap, Deque.","Java, Collections, Data Structures, Trees, Stacks, Queues.",Intermediate,"Learn how to use Java’s built-in data structures like Stack, Queue, and TreeMap."
Arrays & Linked Lists: In-Depth Guide with Examples,Data Structures & Algorithms,M005; M034; M003; M019; M019,"Array manipulation, pointer arithmetic, linked list traversal.","Arrays, Linked Lists, Data Structures, Algorithms.",Intermediate,Get an in-depth understanding of arrays and linked lists with practical coding exercises.
"Competitive Programming: Graphs, Trees & Arrays",Competitive Programming,M048; M016; M003; M004; M025,"Graph traversal, tree algorithms, segment trees, binary search.","Competitive Programming, Graphs, Trees, Arrays, LeetCode.",Intermediate,Master key data structures used in competitive coding contests like Codeforces and LeetCode.
Sorting Algorithms: A Complete Guide,Data Structures & Algorithms,M005; M001; M019; M002; M007,"Sorting techniques, time complexity analysis, recursion, divide & conquer.","Sorting, Algorithms, QuickSort, MergeSort, Data Structures.",Intermediate,"Learn sorting algorithms like QuickSort, MergeSort, HeapSort, BubbleSort, and more with hands-on examples."
"Bucket Sort, Counting Sort & Radix Sort: Non-Comparison Sorting",Data Structures & Algorithms,M005; M016; M024; M019; M021,"Radix Sort, Bucket Sort, Counting Sort, optimization strategies.","Sorting, Radix Sort, Bucket Sort, Counting Sort, Algorithms.",Intermediate,"Explore non-comparison-based sorting techniques like Counting Sort, Radix Sort, and Bucket Sort."
Dynamic Programming for Coding Interviews & Competitive Programming,Competitive Programming,M002; M048; M025; M019; M037,"DP pattern recognition, problem-solving, recursion, memoization.","Competitive Programming, DP, Coding Interviews, Algorithms, Problem Solving.",Intermediate,"Master dynamic programming techniques for tackling real-world coding challenges on LeetCode, Codeforces, and other platforms."
Java Dynamic Programming: Algorithms & Applications,Java Programming,M004; M019; M025; M007; M008,"Java algorithms, memoization, recursion, space optimization.","Java, Dynamic Programming, Memoization, Recursion, Algorithms.",Intermediate,Implement dynamic programming solutions in Java with real-world examples and projects.
Dynamic Programming for Graph Problems,Graph Algorithms,M019; M024; M022; M018; M036,"Floyd-Warshall, Bellman-Ford, DAG shortest paths.","Graphs, DP, Shortest Paths, Network Optimization.",Intermediate,"Solve graph-based DP problems, including shortest paths and network optimization."
Big O Notation: Simplified for Coding Interviews,Interview Preparation,M001; M024; M004; M011; M017,"Algorithm efficiency, performance optimization, problem-solving.","Big O, Coding Interviews, Algorithm Analysis, Problem Solving.",Intermediate,A beginner-friendly guide to understanding and applying Big O notation for coding interviews.
Big O Notation in Python: Hands-On Guide,Python Programming,M003; M019; M002; M018; M017,"Algorithm efficiency, Python implementation, space/time trade-offs.","Python, Big O, Time Complexity, Algorithm Optimization.",Intermediate,Implement and analyze algorithms in Python using Big O notation with real-world examples.
Java Time Complexity & Algorithm Optimization,Java Programming,M004; M005; M007; M019; M021,"Java algorithms, performance tuning, recursion complexity.","Java, Time Complexity, Algorithm Optimization, Big O.",Intermediate,"Learn time complexity concepts with Java implementations for sorting, searching, and recursion problems."
Graph Algorithms & Complexity Analysis,Graph Theory,M002; M017; M003; M019; M011,"Graph traversal complexity, pathfinding efficiency, optimization techniques.","Graph Algorithms, Time Complexity, Shortest Paths, Optimization.",Intermediate,"Master graph algorithms like Dijkstra’s, Floyd-Warshall, and Bellman-Ford while analyzing their time complexity."
The Ultimate Big O Notation Course: 50+ Solved Problems,Coding Challenges,M001; M024; M011; M004; M015,"Algorithmic efficiency, space-time trade-offs, problem-solving.","Big O, Problem Solving, Coding Challenges, Optimization, Algorithms.",Intermediate,Learn Big O notation with 50+ coding problems explained step by step.
The Complete SQL Bootcamp 2024: Go from Zero to Hero,Databases,M012; M021; M040; M022,"SQL queries, joins, aggregate functions, subqueries, indexing, database design.","SQL, PostgreSQL, Data Analysis, Joins, Indexing, Queries.",Intermediate,"Learn SQL from scratch with hands-on exercises in PostgreSQL. Covers queries, joins, indexes, and optimization."
MySQL for Beginners: Learn MySQL from Scratch,Databases,M012; M022; M040; M041,"MySQL setup, database management, normalization, indexing, stored procedures.","MySQL, Databases, SQL Queries, Data Management.",Beginner,"A beginner-friendly MySQL course covering database creation, table management, CRUD operations, and indexing."
Advanced SQL: Performance Optimization & Indexing,Database Optimization,M012; M022; M040; M006,"Indexing strategies, query execution plans, partitioning, indexing.","SQL Optimization, Indexing, Query Performance, MySQL.",Advanced,"Learn how to optimize SQL queries, use indexing efficiently, and troubleshoot performance bottlenecks."
SQL for Data Science: Mastering Relational Databases,Data Analytics,M012; M021; M004; M018,"SQL queries, joins, aggregate functions, data transformation.","SQL, Data Science, Queries, Data Manipulation, PostgreSQL.",Intermediate,"Apply SQL in data analysis, master joins, window functions, and data manipulation techniques."
SQL & Relational Databases for Web Developers,Web Development,M012; M021; M040; M022,"Database connectivity, SQL queries, PHP/MySQL integration.","Web Development, SQL, MySQL, PostgreSQL, Web Applications.",Intermediate,Learn how to integrate SQL databases with web applications using MySQL and PostgreSQL.
Database Security & SQL Injection Prevention,Cybersecurity,M008; M002; M019; M024,"SQL security, injection prevention, access control.","SQL Security, Cybersecurity, SQL Injection, Access Control.",Intermediate,Learn best practices for securing SQL databases and preventing common vulnerabilities.
NoSQL Databases: A Beginner's Guide,Databases,M012; M022; M019; M024,"NoSQL concepts, data modeling, indexing, scalability, CAP theorem.","NoSQL, Databases, MongoDB, Firebase, Cassandra.",Beginner,"Introduction to NoSQL databases like MongoDB, Firebase, and Cassandra, with practical applications."
MongoDB Security Best Practices,Databases,M012; M022; M019; M024,"MongoDB security, authentication, SSL encryption, backup strategies.","MongoDB, Security, NoSQL, Cybersecurity, Encryption.",Intermediate,"Learn how to secure MongoDB databases by implementing authentication, encryption, and access controls."
NoSQL vs. SQL: Choosing the Right Database,Database Technologies,M008; M004; M023; M019,"SQL vs. NoSQL, scalability, indexing, schema design.","SQL, NoSQL, Databases, MySQL, MongoDB, Firebase, Cassandra.",Intermediate,"Compare NoSQL (MongoDB, Firebase, Cassandra) and SQL databases to understand when to use each."
The Complete Database Management System (DBMS) Course,Databases,M012; M022; M019; M024,"DBMS concepts, normalization, ER diagrams, SQL & NoSQL databases.","DBMS, SQL, NoSQL, Normalization, Database Design.",Intermediate,"Learn the fundamentals of database management systems, including relational and NoSQL databases."
Fundamentals of Data Warehousing & Database Architecture,Data Science,M012; M022; M019; M024,"Data modeling, ETL, star schema, indexing, OLAP.","Data Warehousing, OLAP, ETL, Star Schema, DBMS.",Intermediate,"Learn data warehousing concepts, star schema, ETL, and big data integration."
Database Normalization & ER Modeling Masterclass,Database Architecture,M012; M022; M019; M024,"Normalization (1NF to 5NF), ER modeling, data integrity, constraints.","Normalization, ER Modeling, DBMS, Data Integrity, Constraints.",Advanced,Learn how to design efficient databases using ER modeling and normalization techniques.
Data Warehousing for Beginners – A Complete Guide,Data Engineering,M012; M022; M019; M024,"Data warehouse concepts, ETL process, star & snowflake schema, OLAP vs. OLTP.","Data Warehousing, ETL, Star Schema, Snowflake Schema, OLAP.",Beginner,"Learn the fundamentals of data warehousing, including architecture, ETL, and schema design."
Data Warehouse & ETL Testing Automation,Software Testing,M008; M024; M019; M022,"Data validation, ETL testing, test automation, SQL for data warehouse testing.","ETL Testing, Data Validation, SQL, Data Quality, Automation.",Intermediate,Learn how to perform data warehouse and ETL testing using automation tools and SQL.
Google BigQuery: Data Warehousing & Analytics,Cloud Databases,M012; M022; M019; M024,"Google BigQuery, SQL analytics, data ingestion, data lake integration.","Google BigQuery, Cloud Data Warehouse, SQL Analytics, Data Lakes, Data Processing.",Intermediate,Learn how to use Google BigQuery for data warehousing and large-scale data analytics.
Data Warehousing & Machine Learning Integration,Machine Learning,M008; M022; M019; M024,"Predictive analytics, AI-powered data processing, ML model deployment.","Data Warehousing, Machine Learning, AI, Predictive Analytics, Data Processing.",Intermediate,Learn how to integrate machine learning with data warehouses for predictive analytics.
Memory Management in C and C++,Programming Languages,M001; M002; M019; M024,"Dynamic memory allocation, malloc/free, new/delete, pointers, memory leaks.","C++, Memory Management, Heap, Stack, Dynamic Allocation.",Intermediate,"Learn how memory management works in C and C++, including stack vs. heap allocation, pointers, and garbage collection."
Java Memory Management & Garbage Collection,Java Programming,M004; M017; M024; M019,"Java heap structure, JVM memory management, GC tuning, memory leaks.","Java, JVM, Garbage Collection, Memory Leaks, GC Tuning.",Intermediate,"Learn how Java manages memory using the heap, stack, and garbage collection techniques."
Web Browser Memory Management for JavaScript Developers,Web Development,M001; M022; M009; M024,"JavaScript memory model, closures, garbage collection, performance debugging.","JavaScript, Memory Management, Web Performance, Garbage Collection.",Intermediate,Learn how web browsers manage memory and how to prevent memory leaks in JavaScript applications.
Linux for Beginners: The Complete Guide,Operating Systems,M017; M024; M019; M006,"Command line basics, file system navigation, package management, user management.","Linux, CLI, Shell, Ubuntu, File System.",Beginner,"A step-by-step introduction to Linux, covering installation, basic commands, and file management."
Linux Administration Bootcamp: Go from Beginner to Advanced,System Administration,M024; M019; M011; M002,"User management, file permissions, network configuration, system security.","Linux Admin, System Administration, User Management, Security.",Beginner,Learn the skills required to become a Linux system administrator.
Linux Server Administration: A Practical Guide,System Administration,M024; M011; M003; M019,"Server setup, remote access, SSH, firewall management.","Linux Server, SSH, Security, Firewall.",Intermediate,A hands-on guide to managing Linux servers in real-world scenarios.
Linux Containers & Virtualization with Docker & Kubernetes,DevOps & Virtualization,M024; M009; M002; M005,"Docker, Kubernetes, LXC, container orchestration.","Linux Containers, Docker, Kubernetes, Virtualization.",Intermediate,Learn how to use Linux containers for application deployment.
TCP/IP Networking for Beginners - Basics to Advanced,Networking,M044; M021; M025; M019,"OSI model, IP addressing, subnetting, DNS, DHCP, packet analysis.","TCP/IP, OSI Model, Networking, IP Addressing, Subnetting.",Beginner,"Learn the fundamentals of TCP/IP, network layers, and protocol interactions."
The Complete Networking Fundamentals Course,Networking,M044; M021; M025; M019,"Network layers, switching, routing, firewalls, network security.","Networking, Protocols, HTTP, FTP, Firewalls.",Intermediate,"Covers essential networking concepts, including TCP/IP, HTTP, and FTP."
HTTP Basics: Understanding Web Communication,Web Development,M007; M005; M011; M019,"HTTP methods, status codes, headers, HTTPS security.","HTTP, Web Protocols, HTTPS, REST APIs, Security.",Beginner,Learn how HTTP and HTTPS work in web communication.
FTP & File Transfer Protocols: A Practical Guide,Networking & Security,M024; M011; M002; M019,"FTP server setup, file transfer security, encryption methods.","FTP, SFTP, FTPS, File Transfer, Encryption.",Intermediate,"Learn how FTP, SFTP, and FTPS work in secure file transfers."
Hands-on Network Automation with Python,DevOps & Networking,M024; M009; M019; M002,"Network scripting, RESTful APIs, SSH automation, SNMP monitoring.","Network Automation, Python, DevOps, APIs, SNMP.",Intermediate,Automate networking tasks using Python and networking APIs.
Cryptography & Encryption for Cybersecurity,Security,M008; M019; M024; M029,"AES, RSA, hashing, digital signatures, cryptographic protocols.","Cryptography, Encryption, Cybersecurity, RSA, Hashing.",Intermediate,Understand encryption techniques used to secure data in cybersecurity.
"Network Security Fundamentals: VPNs, Firewalls & IDS",Security,M008; M017; M019; M025,"Network security architecture, firewall rules, VPN tunneling, IDS/IPS, encryption.","Network Security, VPNs, Firewalls, IDS, Encryption.",Intermediate,"Understand the key components of network security and how firewalls, VPNs, and IDS work."
Quantum Cryptography: Future of Encryption,Advanced Cryptography,M008; M024; M037; M019,"Quantum key distribution (QKD), Shor’s algorithm, post-quantum cryptography.","Quantum Cryptography, QKD, Post-Quantum Encryption.",Intermediate,Learn about quantum computing’s impact on modern encryption techniques.
Cryptographic Attacks: How Hackers Break Encryption,Ethical Hacking,M019; M024; M008; M025,"Man-in-the-Middle attacks, side-channel attacks, padding oracle attacks","Cryptanalysis, Cryptographic Attacks, Cybersecurity, Encryption Flaws.",Intermediate,Learn how to identify and mitigate cryptographic vulnerabilities in security systems.
AWS Certified Solutions Architect – Associate 2024,Cloud Computing,M009; M001; M024; M022,"AWS EC2, S3, VPC, RDS, IAM, Lambda, Auto Scaling.","AWS, Cloud, Architect, Certification, EC2, S3.",Intermediate,"Comprehensive guide to AWS architecture, services, and best practices for the certification exam."
AWS Certified DevOps Engineer – Professional,DevOps & Cloud,M008; M024; M019; M022,"AWS CodeDeploy, CodePipeline, CloudFormation, Elastic Beanstalk.","AWS, DevOps, CI/CD, CloudFormation, CodeDeploy.",Intermediate,"Learn AWS automation, CI/CD pipelines, infrastructure as code, and security for DevOps."
AWS Lambda & Serverless Applications,Cloud Computing,M001; M024; M003; M005,"AWS Lambda, API Gateway, DynamoDB, Step Functions."," AWS Lambda, Serverless, API Gateway, DynamoDB.",Intermediate,Learn how to build and deploy serverless applications using AWS Lambda.
AZ-900: Microsoft Azure Fundamentals Certification,Cloud Computing,M009; M024; M022; M004,"Azure Virtual Machines, Blob Storage, Identity Management.","Azure, Cloud, Certification, Fundamentals.",Intermediate,"Learn the core concepts of Azure cloud computing, pricing, and security."
Microsoft Azure Security Technologies (AZ-500),Security & Cloud Computing,M019; M017; M008; M025,"Azure Security Center, Defender for Cloud, Azure Sentinel, Encryption.","Azure Security, Compliance, Encryption, IAM, Defender.",Intermediate,"Learn how to secure Azure workloads, implement compliance policies, and manage threats."
Microsoft Azure AI & Machine Learning (AI-102),AI & Machine Learning,M015; M037; M022; M024,"Azure ML Studio, Cognitive Services, Chatbots, AI APIs.","Azure AI, ML, Cognitive Services, Chatbots.",Intermediate,Learn how to build AI-driven applications using Azure AI and ML services.
Google Cloud Data Engineering & BigQuery,Data Science & Cloud,M009; M024; M001; M005,"BigQuery, Dataflow, Dataproc, Cloud Storage, Data Lakes.","GCP, BigQuery, Data Engineering, ETL, Cloud Storage.",Intermediate,"Master data processing, ETL, and analytics using Google Cloud’s BigQuery."
Virtualization Essentials with VMware & VirtualBox,Virtualization,M017; M024; M012; M021,"VMware vSphere, VirtualBox, Hypervisors, Networking.","Virtualization, VMware, VirtualBox, Hypervisor.",Intermediate,"Introduction to virtualization concepts, VMware ESXi, and VirtualBox."
Docker Mastery: With Kubernetes & Swarm from a Docker Captain,DevOps & Cloud,M024; M009; M001; M017,"Docker CLI, Swarm Mode, Kubernetes Basics, CI/CD.","Docker, Containers, DevOps, Kubernetes, CI/CD.",Intermediate,"Master Docker, Docker Compose, Docker Swarm, and Kubernetes."
Introduction to Cloud Security,Cybersecurity & Cloud Computing,M017; M019; M024; M022,"Cloud security fundamentals, risk assessment, compliance, security best practices.","Cloud security, compliance, risk management, cybersecurity.",Beginner,"Learn the fundamentals of cloud security, including data protection, compliance, and risk management."
Deep Learning A-Z™: Hands-On Artificial Neural Networks,Deep Learning,M037; M005; M022; M001,"ANN, CNN, RNN, TensorFlow, Keras, Python.","deep learning, AI, Python, TensorFlow, Keras.",Intermediate,"Covers artificial neural networks, convolutional neural networks (CNNs), and recurrent neural networks (RNNs) using Python."
Python for Deep Learning & Machine Learning with TensorFlow,Artificial Intelligence,M005; M037; M019; M024,"Neural networks, TensorFlow, Python, AI applications.","Python, deep learning, AI, neural networks, TensorFlow.",Intermediate,"Learn deep learning from scratch using Python, TensorFlow, and Keras."
Explainable AI (XAI) in Deep Learning,AI & Ethics,M037; M005; M024; M019,"Model interpretability, SHAP, LIME, AI transparency.","XAI, AI ethics, deep learning, model interpretability, fairness.",Intermediate,Learn how to make deep learning models interpretable.
Deep Reinforcement Learning with Python,AI & Machine Learning,M005; M037; M019; M024,"Q-learning, deep Q-networks, AI decision-making.","reinforcement learning, deep learning, AI, Q-learning, RL.",Intermediate,Learn reinforcement learning using deep learning techniques.
Generative Adversarial Networks (GANs) for Beginners,Deep Learning,M037; M005; M021; M024,"GANs, deepfake generation, AI image synthesis.","GANs, deep learning, AI, image synthesis, deepfake.",Beginner,Build GAN models from scratch for image synthesis and AI creativity.
Deep Learning with TensorFlow 2.0,Artificial Intelligence,M037; M005; M001; M024,"TensorFlow 2.0, Keras, model optimization, neural networks.","deep learning, TensorFlow, AI, neural networks, Keras.",Intermediate,Explore TensorFlow 2.0 for deep learning model building.
Recurrent Neural Networks (RNN) – From Scratch,Natural Language Processing,M015; M037; M003; M024,"RNN, LSTM, GRU, NLP, text generation.","deep learning, NLP, RNN, LSTM, sequence modeling.",Intermediate,"Implement RNNs, LSTMs, and GRUs for sequence modeling and NLP."
Natural Language Processing (NLP) with Python,Natural Language Processing,M015; M037; M003; M022,"Tokenization, stemming, lemmatization, POS tagging.","NLP, Python, text processing, machine learning.",Intermediate,Covers fundamental NLP techniques using Python and libraries like NLTK and spaCy.
Computer Vision for Beginners with OpenCV & Python,Computer Vision,M037; M005; M024; M019,"Image processing, feature detection, object recognition.","computer vision, image processing, OpenCV, Python.",Beginner,Covers the basics of Computer Vision using OpenCV and Python.
Introduction to Computer Vision with Deep Learning,Computer Vision,M037; M005; M022; M024,"Neural networks, convolutional neural networks (CNNs), feature extraction.","deep learning, CNN, AI, image classification.",Beginner,Beginner-friendly introduction to deep learning for Computer Vision applications.
Introduction to Reinforcement Learning with Python,Reinforcement Learning,M005; M037; M021; M022,"Markov Decision Processes (MDP), Bellman Equations, Dynamic Programming.","reinforcement learning, AI, machine learning, MDP.",Beginner,Covers the fundamentals of Reinforcement Learning (RL) with Python.
Data Analytics for Beginners: A Hands-On Approach,Data Analytics,M037; M005; M019; M022,"Data cleaning, exploratory data analysis (EDA), basic statistics.","data analytics, beginner, Python, SQL, Excel.",Beginner,"Learn data analysis fundamentals using Python, Excel, and SQL."
Excel for Data Analytics and Business Intelligence,Data Analytics,M010; M005; M021; M012,"Pivot tables, VLOOKUP, Power Query, dashboard creation.","Excel, business intelligence, data visualization, analytics.",Intermediate,Covers advanced Excel functions for data analysis and visualization.
Python for Data Analysis & Visualization,Data Analysis,M003; M005; M021; M037,"Pandas, NumPy, Matplotlib, Seaborn, data wrangling.","Python, data analysis, Pandas, visualization.",Intermediate,Use Python libraries like Pandas and Matplotlib for data analytics.
Data Science and Machine Learning for Data Analytics,Machine Learning,M005; M019; M022; M024,"Regression, classification, clustering, feature engineering.","machine learning, data analytics, AI, Python.",Intermediate,Learn machine learning techniques for data analysis.
Predictive Analytics and Data Mining with Python,Predictive Analytics,M005; M021; M022; M019,"Data preprocessing, classification, clustering, feature selection.","predictive analytics, data mining, Python, AI.",Intermediate,"Covers predictive modeling, data mining, and machine learning."
Data Engineering & ETL for Data Analytics,Data Engineering,M001; M024; M011; M022,"ETL pipelines, Apache Airflow, SQL, big data.","data engineering, ETL, big data, SQL.",Intermediate,Learn data engineering concepts for data processing and pipeline creation.
AI-Powered Analytics with Python & TensorFlow,AI & Machine Learning,M005; M037; M001; M024,"AI-based data processing, automation, TensorFlow.","AI analytics, automation, TensorFlow, deep learning.",Intermediate,Use AI techniques to automate data analytics.
The Ultimate Hands-On Hadoop - Tame Big Data with Hadoop & Spark,Big Data Frameworks,M024; M001; M005; M022,"HDFS, MapReduce, Apache Spark, YARN, Hive, Pig.","Hadoop, Spark, big data, HDFS, MapReduce, YARN.",Intermediate,A practical guide to working with Hadoop and Spark for big data processing.
"Big Data for Beginners - Hadoop, Spark & Data Engineering Basics",Big Data,M024; M005; M011; M022,"HDFS basics, Hadoop ecosystem, Spark fundamentals.","big data, Hadoop, Spark, NoSQL, data processing.",Beginner,A beginner-friendly introduction to big data concepts and frameworks.
Big Data Hadoop Administration: Learn Big Data Technologies,Hadoop Administration,M024; M003; M011; M022,"Cluster setup, YARN, HDFS configuration, monitoring tools.","Hadoop admin, YARN, big data cluster management, IT operations.",Intermediate,"A step-by-step guide to installing, configuring, and managing a Hadoop cluster."
Apache Hadoop & Spark for Financial Data Analysis,Big Data for Finance,M024; M003; M011; M022,"Risk modeling, fraud detection, predictive analytics.","financial analytics, big data, fraud detection, Spark.",Intermediate,Learn how big data frameworks are applied in financial analytics.
Tableau for Beginners: Get Certified and Learn Data Visualization,Data Visualization,M010; M005; M021; M024,"Tableau basics, dashboard building, data storytelling.","Tableau, dashboards, data storytelling, visualization.",Beginner,A complete beginner-friendly guide to mastering Tableau.
Introduction to Power BI for Data Analysis and Business Intelligence,Power BI,M010; M021; M024; M004,"Power BI reports, data modeling, interactive dashboards.","Power BI, dashboards, data insights, business intelligence.",Beginner,A hands-on Power BI course focusing on business insights.
Power BI for Data Scientists - Masterclass with Python & R,Power BI,M010; M005; M021; M024,"Power BI scripting, Python data visualization, R analytics.","Power BI, Python, R, advanced analytics.",Advanced,Learn how to integrate Python and R with Power BI for advanced analytics.
AI-Powered Data Visualization with Tableau & Power BI,AI in Data Visualization,M010; M021; M024; M004,"AI-powered insights, machine learning integration, predictive analytics.","AI, machine learning, Power BI, Tableau, predictive analytics.",Intermediate,Use AI and ML models to enhance data visualization in Tableau and Power BI.
"The Complete Web Developer Bootcamp (HTML, CSS, JavaScript)",Frontend Development,M007; M015; M004; M024,"HTML5, CSS3, JavaScript fundamentals, responsive design.","Web development, frontend, HTML, CSS, JavaScript.",Intermediate,"Covers the basics of frontend development, including HTML, CSS, and JavaScript."
JavaScript Algorithms & Data Structures – The Complete Guide,JavaScript,M007; M015; M002; M024,"Data structures, recursion, sorting algorithms.","JavaScript, DSA, problem-solving.",Intermediate,"Covers JavaScript algorithms, data structures, and problem-solving techniques."
"Build Responsive Websites with HTML, CSS, and Bootstrap",UI/UX Design,M007; M015; M004; M009,"HTML, CSS, Bootstrap 5, responsive design.","HTML, CSS, Bootstrap, mobile-friendly.",Intermediate,Learn how to create mobile-friendly websites using Bootstrap.
"The Complete Node.js Developer Course (MVC, Express, MongoDB)",Backend Development,M007; M004; M009; M010,"Node.js, Express.js, MongoDB, REST APIs, authentication.","Node.js, Express, backend, APIs.",Intermediate,Covers the fundamentals of backend development using Node.js and Express.
Python Django for Beginners: Build a Full-Stack Website,Django,M003; M005; M024; M016,"Django models, views, templates, PostgreSQL.","Django, Python, backend, web applications.",Beginner,Learn Django framework from scratch and build web applications.
Mastering Flask: Building Web Applications with Python,Flask,M003; M005; M022; M024,"Flask, ORM, RESTful APIs, authentication.","Flask, web development, authentication, databases.",Intermediate,"Learn Flask, SQLAlchemy, and authentication for backend applications."
"The Complete Web Developer Course: HTML, CSS, JavaScript, React & Node.js",Full-Stack Development,M007; M005; M022; M024,"HTML, CSS, JavaScript, React, Node.js, Express.js, MongoDB.","Full-stack, MERN, frontend, backend, databases.",Intermediate,"Learn full-stack development from scratch, covering front-end and back-end."
"Full-Stack Development with MEAN (MongoDB, Express, Angular, Node.js)",MEAN Stack,M007; M005; M022; M004,"Angular, MongoDB, Express.js, Node.js, JWT authentication.","MEAN stack, Angular, REST APIs, full-stack development.",Intermediate,Covers Angular for frontend and Node.js for backend with MongoDB.
Full-Stack Machine Learning Web App with Flask & React,AI & Full-Stack,M005; M007; M025; M024,"Flask, React, TensorFlow, data visualization.","AI, Flask, React, full-stack ML.",Intermediate,Learn to integrate machine learning models into a full-stack web app.
CI/CD with Jenkins: Automate Software Delivery,Jenkins,M024; M005; M004; M019,"Integration with Git, Docker, and Kubernetes,Automated testing & deployment","Jenkins, CI/CD, DevOps, automation",Intermediate,"Learn to set up and manage CI/CD pipelines using Jenkins, from installation to deployment."
